成员内部类(member inner class)
        成员内部类是最普通的内部类，它的定义为位于另一个类的内部
        成员内部类可以无条件访问外部类的所有成员属性和成员方法（包括private成员和静态成员）。
    
    
        当成员内部类拥有和外部类同名的成员变量或者方法时，会发生隐藏现象，
        即默认情况下访问的是成员内部类的成员。
        如果要访问外部类的同名成员，需要以下面的形式进行访问：
                外部类.this.成员变量
                外部类.this.成员方法
    
    
       虽然成员内部类可以无条件地访问外部类的成员，
       而外部类想访问成员内部类的成员却不是这么随心所欲了。
       在外部类中如果要访问成员内部类的成员，必须先创建一个成员内部类的对象，
       再通过指向这个对象的引用来访问

    
       成员内部类是依附外部类而存在的，
       也就是说，如果要创建成员内部类的对象，前提是必须存在一个外部类的对象
       创建成员内部类对象的一般方式如下:
        //第一种方式：
        Outter outter = new Outter();
        Outter.Inner inner = outter.new Inner();  //必须通过Outter对象来创建

        //第二种方式：
        Outter.Inner inner1 = outter.getInnerInstance();

    
       内部类可以拥有private访问权限、protected访问权限、public访问权限及包访问权限
       如果成员内部类Inner用private修饰，则只能在外部类的内部访问，
       如果用public修饰，则任何地方都能访问；
       如果用protected修饰，则只能在同一个包下或者继承外部类的情况下访问；
       如果是默认访问权限，则只能在同一个包下访问
       这一点和外部类有一点不一样，外部类只能被public和包访问两种权限修饰
       
